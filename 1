local UILibrary = {}
UILibrary.__index = UILibrary

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local Player = Players.LocalPlayer

local MIN_WIDTH, MIN_HEIGHT = 300, 200

function UILibrary:Init()
	local self = setmetatable({}, UILibrary)

	local ScreenGui = Instance.new("ScreenGui")
	ScreenGui.Name = "UILibrary"
	ScreenGui.Parent = CoreGui
	ScreenGui.ResetOnSpawn = false
	self.ScreenGui = ScreenGui

	local Frame = Instance.new("Frame", ScreenGui)
	Frame.Size = UDim2.new(0, 700, 0, 520)
	Frame.Position = UDim2.new(0.5, -350, 0.5, -260)
	Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	Frame.BorderSizePixel = 5
	Frame.BorderColor3 = Color3.fromRGB(45, 45, 45)
	Frame.Active = true
	Frame.Draggable = false
	Frame.ClipsDescendants = true
	self.Frame = Frame

	local UICorner = Instance.new("UICorner", Frame)
	UICorner.CornerRadius = UDim.new(0, 8)
	self.UICorner = UICorner
	local SettingsPanel = Instance.new("Frame", Frame)
	SettingsPanel.Size = UDim2.new(0, 200, 1, 0)
	SettingsPanel.Position = UDim2.new(0, -200, 0, 0)
	SettingsPanel.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
	SettingsPanel.BorderSizePixel = 0
	self.SettingsPanel = SettingsPanel
	self:SetupDragging()
 
 	local SettingsButton = Instance.new("ImageButton", Frame)
	SettingsButton.Size = UDim2.new(0, 40, 0, 40)
	SettingsButton.Position = UDim2.new(0, 10, 0, 10)
	SettingsButton.BackgroundTransparency = 1
	SettingsButton.Image = "rbxassetid://79377058817692"
	SettingsButton.Name = "SettingsButton"

	local visible = false
	SettingsButton.MouseButton1Click:Connect(function()
		TweenService:Create(SettingsPanel, TweenInfo.new(0.25), {
			Position = UDim2.new(0, visible and -200 or 0, 0, 0)
		}):Play()
		visible = not visible
	end)
	local InfoLabel = Instance.new("TextLabel", Frame)
	InfoLabel.AnchorPoint = Vector2.new(1, 1)
	InfoLabel.Position = UDim2.new(1, -10, 1, -10)
	InfoLabel.BackgroundTransparency = 1
	InfoLabel.Size = UDim2.new(0, 300, 0, 80)
	InfoLabel.TextXAlignment = Enum.TextXAlignment.Right
	InfoLabel.TextYAlignment = Enum.TextYAlignment.Bottom
	InfoLabel.Font = Enum.Font.RobotoMono
	InfoLabel.TextSize = 14
	InfoLabel.TextWrapped = true
	InfoLabel.RichText = true
	InfoLabel.Visible = false
	self.InfoLabel = InfoLabel

	UserInputService.InputBegan:Connect(function(input, gpe)
		if gpe then return end
		if input.KeyCode == Enum.KeyCode.Insert then
			self:ToggleVisible()
		end
	end)

	local UnloadButton = Instance.new("ImageButton", Frame)
	UnloadButton.Size = UDim2.new(0, 40, 0, 40)
	UnloadButton.Position = UDim2.new(1, -5, 0, 10)
	UnloadButton.AnchorPoint = Vector2.new(1, 0)
	UnloadButton.BackgroundTransparency = 1
	UnloadButton.Image = "rbxassetid://10653365009"
	UnloadButton.MouseButton1Click:Connect(function()
		ScreenGui:Destroy()
	end)

	self:StartInfoLoop()

	return self
end

function UILibrary:ToggleVisible()
	local Frame = self.Frame
	local fadeTween
	if not Frame.Visible then
		Frame.Visible = true
		Frame.BackgroundTransparency = 1
		fadeTween = TweenService:Create(Frame, TweenInfo.new(0.3), {BackgroundTransparency = 0})
		fadeTween:Play()
		TweenService:Create(self.UICorner, TweenInfo.new(0.3), {CornerRadius = UDim.new(0, 8)}):Play()
	else
		fadeTween = TweenService:Create(Frame, TweenInfo.new(0.3), {BackgroundTransparency = 1})
		fadeTween:Play()
		fadeTween.Completed:Connect(function()
			Frame.Visible = false
		end)
		TweenService:Create(self.UICorner, TweenInfo.new(0.3), {CornerRadius = UDim.new(0, 0)}):Play()
	end
end

function UILibrary:SetupDragging()
	local Frame = self.Frame
	local dragging, resizing, dragStart, startPos, resizeStartPos, resizeStartSize

	Frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			local pos = input.Position
			local fPos = Frame.AbsolutePosition
			local fSize = Frame.AbsoluteSize
			if pos.X >= fPos.X + fSize.X - 20 and pos.Y >= fPos.Y + fSize.Y - 20 then
				resizing = true
				resizeStartPos = pos
				resizeStartSize = Frame.Size
			else
				dragging = true
				dragStart = pos
				startPos = Frame.Position
			end
		end
	end)

	Frame.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
			resizing = false
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			if dragging then
				local delta = input.Position - dragStart
				Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
			elseif resizing then
				local delta = input.Position - resizeStartPos
				Frame.Size = UDim2.new(0, math.max(MIN_WIDTH, resizeStartSize.X.Offset + delta.X), 0, math.max(MIN_HEIGHT, resizeStartSize.Y.Offset + delta.Y))
			end
		end
	end)
end

function UILibrary:StartInfoLoop()
	local label = self.InfoLabel
	local player = Player
	local fps = 0
	local frameCount = 0
	local last = tick()

	RunService.RenderStepped:Connect(function()
		if not label.Visible then return end
		frameCount += 1
		local now = tick()
		if now - last >= 1 then
			fps = math.floor(frameCount / (now - last))
			last = now
			frameCount = 0
			local ping = math.floor(player:GetNetworkPing() * 1000)
			local sizeX = math.floor(self.Frame.AbsoluteSize.X)
			local sizeY = math.floor(self.Frame.AbsoluteSize.Y)
			local device = UserInputService.TouchEnabled and "Mobile" or UserInputService.GamepadEnabled and "Console" or "PC"
			label.Text = string.format("<font color=\"rgb(0,255,0)\">fps: %d</font>\n<font color=\"rgb(255,255,0)\">ping: %d</font>\n<font color=\"rgb(255,255,255)\">ui: %dx%d\ndevice: %s</font>", fps, ping, sizeX, sizeY, device)
		end
	end)
end

function UILibrary:CreateToggle(name, callback, default)

end

function UILibrary:CreateSlider(name, min, max, callback)
end

return UILibrary
